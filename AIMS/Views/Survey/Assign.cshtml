@model IEnumerable<AIMS.Models.AssignUserViewModel>

@{
    ViewBag.Title = "Assign Survey";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <h3><font color="red">Issue on this page.  you can't unassign, and the checkboxes don't reflect what is already assigned... BUT if you check the box and click SAVE, a survey WILL get assigned</font></h3>
    <h4>Survey Name - @ViewBag.surveyName</h4>
    <table class="table">
        <tr>
            <th>
                Assigned
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UserType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CreatedAt)
            </th>
        </tr>
        @foreach (var item in Model) 
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.UserId)
                </td>
                <td>
                    @*@Html.EditorFor(modelItem => item.IsAssigned, new { htmlAttributes = new { @id = "@item.UserId", @onclick = "assignmentChanged('@item.UserId')" } })*@
                    <input id="@item.UserId" type="checkbox" onclick="assignmentChanged('@item.UserId')" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UserType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreatedAt)
                </td>
            </tr>
        }
        
    </table>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="button" value="Save" class="btn-aims-submit" onclick="submitMe('@ViewBag.surveyId')"/><br />
            <button class="btn-aims-submit" onclick="location.href='@Url.Action("Index")'">Go Back</button>
        </div>
    </div>
}

@section Scripts
{
    <script type="text/javascript">
        var userIdListAssign = [];
        var userIdListUnAssign = [];

        window.onload = function updateCheckboxes()
        {
            //I REALLY want to use EditorFor instead of manually doing this, 
            //but EditorFor won't let me use variables for id / javascript params
            //hence I'm here...  
            //TODO either finish this so that checkbox settings persist 
            //OR figure out Editor For with variables...
        }

        function assignmentChanged(userId)
        {
            if (document.getElementById(userId).checked == false) {
                //alert("toggled to false - unassign" + userId);
                userIdListUnAssign.push(userId);
            }
            else {
                //alert("toggled to true - assign" + userId);
                userIdListAssign.push(userId);
            }
        }

        function submitMe(surveyId) 
        {
            //console.log("aoIDList[0] = " + aoIDList[0]);
        
            $.ajax({
                url: '/Survey/AssignPost/',
                traditional: true,
                data: {surveyID: surveyId, userIDListAssign: userIdListAssign, userIDListUnAssign: userIdListUnAssign}, 
                success: function(data){
                    //alert(data.data);
                    //alert(data.location);
                    //alert(data.arguments);
                    //alert(data);
                
                    //window.location = data.redirectUrl;
                    window.location = "/../Survey/Index/";
                }
            });
        }
    </script>
}